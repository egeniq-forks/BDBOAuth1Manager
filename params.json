{"name":"BDBOAuth1Manager","tagline":"AFNetworking 2.0-compatible replacement for AFOAuth1Client.","body":"# BDBOAuth1Manager\r\n\r\nBDBOAuth1Manager is an AFNetworking 2.0-compatible replacement for AFOAuth1Client.\r\n\r\n## Usage\r\n\r\nBDBOAuth1Manager consists of three core classes: `BDBOAuth1RequestSerializer`, `BDBOAuth1RequestOperationManger`, and `BDBOAuth1SessionManager`. Below I will provide a quick overview of each, but to really see how the three classes work together, take a look at the included demo apps. One is a simple Twitter client and the other a simple Flickr photo gallery, but they show how to get started using BDBOAuth1Manager in your projects.\r\n\r\n### BDBOAuth1RequestOperationManger\r\n\r\n`BDBOAuth1RequestOperationManger` is a subclass of `AFHTTPRequestOperationManager` that provides methods to facilitate the OAuth 1 authentication flow.\r\n\r\n```objective-c\r\n@property (nonatomic, strong) BDBOAuth1RequestSerializer *requestSerializer;\r\n@property (nonatomic, assign, readonly, getter = isAuthorized) BOOL authorized;\r\n\r\n#pragma mark Initialization\r\n- (instancetype)initWithBaseURL:(NSURL *)url\r\n                    consumerKey:(NSString *)key\r\n                 consumerSecret:(NSString *)secret;\r\n\r\n#pragma mark Deauthorize\r\n- (BOOL)deauthorize;\r\n\r\n#pragma mark Authorization Flow\r\n- (void)fetchRequestTokenWithPath:(NSString *)requestPath\r\n                           method:(NSString *)method\r\n                      callbackURL:(NSURL *)callbackURL\r\n                            scope:(NSString *)scope\r\n                          success:(void (^)(BDBOAuthToken *requestToken))success\r\n                          failure:(void (^)(NSError *error))failure;\r\n\r\n- (void)fetchAccessTokenWithPath:(NSString *)accessPath\r\n                          method:(NSString *)method\r\n                    requestToken:(BDBOAuthToken *)requestToken\r\n                         success:(void (^)(BDBOAuthToken *accessToken))success\r\n                         failure:(void (^)(NSError *error))failure;\r\n```\r\n\r\n### BDBOAuth1SessionManager\r\n\r\n`BDBOAuth1SessionManager` is a subclass of `AFHTTPSessionManager` that implements all the same methods and properties as `BDBOAuth1RequestOperationManger`, described above.\r\n\r\nIf you're targeting either iOS 6 or OS X 10.8, you must use `BDBOAuth1RequestOperationManger`, as the underlying `NSURLSession` that is used by `AFHTTPSessionManager` is a new addition to the iOS and OS X networking frameworks for iOS 7 and OS X 10.9.\r\n\r\n### BDBOAuth1RequestSerializer\r\n\r\n`BDBOAuth1RequestSerializer` is a subclass of `AFHTTPRequestSerializer` that handles all the networking requests performed by `BDBOAuth1RequestOperationManger` and `BDBOAuth1SessionManager`. Both classes automatically handle the creation of this serializer, so you should never have to instantiate it on your own.\r\n\r\n`BDBOAuth1RequestSerializer` also has built-in support for storing and retrieving access tokens to/from the user's keychain, utilizing the service name to differentiate tokens. `BDBOAuth1RequestOperationManger` and `BDBOAuth1SessionManager` automatically set the service name to baseURL.host (e.g. api.twitter.com) when they are instantiated.\r\n\r\n```objective-c\r\n@property (nonatomic, copy, readonly) BDBOAuthToken *accessToken;\r\n\r\n#pragma mark Initialization\r\n+ (instancetype)serializerForService:(NSString *)service\r\n                     withConsumerKey:(NSString *)key\r\n                      consumerSecret:(NSString *)secret;\r\n- (id)initWithService:(NSString *)service\r\n          consumerKey:(NSString *)key\r\n       consumerSecret:(NSString *)secret;\r\n\r\n#pragma mark OAuth\r\n- (NSDictionary *)OAuthParameters;\r\n\r\n#pragma mark AccessToken\r\n- (BOOL)saveAccessToken:(BDBOAuthToken *)accessToken;\r\n- (BOOL)removeAccessToken;\r\n```\r\n\r\n## Authentication Flow\r\n\r\nThe first step in performing the OAuth handshake is getting an OAuth request token for your application. This can be done with the `fetchRequestTokenWithPath:method:callbackURL:scope:success:failure:` method.\r\n\r\n```objective-c\r\n[self.networkManager fetchRequestTokenWithPath:@\"/oauth/request_token\"\r\n                                        method:@\"POST\"\r\n                                   callbackURL:[NSURL URLWithString:@\"bdboauth://request\"]\r\n                                         scope:nil\r\n                                       success:^(BDBOAuthToken *requestToken) {\r\n                                           NSString *authURL = [NSString stringWithFormat:@\"https://api.twitter.com/oauth/authorize?oauth_token=%@\", requestToken.token];\r\n                                           [[UIApplication sharedApplication] openURL:[NSURL URLWithString:authURL]];\r\n                                       }\r\n                                       failure:^(NSError *error) {\r\n                                           NSLog(@\"Error: %@\", error.localizedDescription);\r\n                                       }];\r\n``` \r\n\r\n### Creating a URL Type for OAuth Callbacks\r\n\r\nWhen calling `fetchRequestTokenWithPath:method:callbackURL:scope:success:failure:`, you must provide a unique callback URL whose scheme corresponds to a URL type you've added to your project target. This allows the OAuth provider to return the user to your app after the user has authorized it. For example, if I add a URL type to my project with the scheme `bdboauth`, my application would then respond to all URL requests that begin with `bdboauth:`. If I pass `bdboauth://request` as the callback URL, the OAuth provider would call that URL and my application would resume.\r\n\r\n![URL Types Screenshot](https://dl.dropboxusercontent.com/u/6225/GitHub/BDBOAuth1Manager/urltypes.png)\r\n\r\n### Responding to OAuth Callbacks\r\n\r\nIn order to respond to your application's URL scheme being called, you must implement the `-application:openURL:sourceApplication:annotation` method within your application delegate. You can do something like this:\r\n\r\n```objective-c\r\n- (BOOL)application:(UIApplication *)application\r\n            openURL:(NSURL *)url\r\n  sourceApplication:(NSString *)sourceApplication\r\n         annotation:(id)annotation\r\n{\r\n    if ([url.scheme isEqualToString:@\"bdboauth\"])\r\n    {\r\n        if ([url.host isEqualToString:@\"request\"])\r\n        {\r\n            NSDictionary *parameters = [url dictionaryFromQueryString];\r\n            if (parameters[@\"oauth_token\"] && parameters[@\"oauth_verifier\"])\r\n                [self.networkManager fetchAccessTokenWithPath:@\"/oauth/access_token\"\r\n                                                       method:@\"POST\"\r\n                                                 requestToken:[BDBOAuthToken tokenWithQueryString:url.query]\r\n                                                      success:^(BDBOAuthToken *accessToken) {\r\n                                                          [self.networkManager.requestSerializer saveAccessToken:accessToken];\r\n                                                      }];\r\n        }\r\n        return YES;\r\n    }\r\n    return NO;\r\n}\r\n```\r\n\r\n## Credits\r\n\r\nBDBOAuth1Manager was created by [Bradley David Bergeron](http://www.bradbergeron.com) and influenced by [AFOAuth1Client](https://github.com/AFNetworking/AFOAuth1Client). Both [AFNetworking](https://github.com/AFNetworking/AFNetworking) and [AFOAuth1Client](https://github.com/AFNetworking/AFOAuth1Client) are the awesome work of [Mattt Thompson](https://github.com/mattt).\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}